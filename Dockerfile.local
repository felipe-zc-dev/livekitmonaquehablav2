FROM python:3.11-slim AS base

# ============================================================================
# VARIABLES DE ENTORNO OPTIMIZADAS
# ============================================================================
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1

# ============================================================================
# DEPENDENCIAS DEL SISTEMA - LiveKit Agents Requirements
# ============================================================================
RUN apt-get update && apt-get install -y --no-install-recommends \
    # Build essentials
    build-essential \
    curl \
    wget \
    # Audio/Video processing (requerido por LiveKit Agents)
    ffmpeg \
    libsndfile1 \
    portaudio19-dev \
    libasound2-dev \
    pkg-config \
    # SSL certificates
    ca-certificates \
    # Git para HuggingFace downloads
    git \
    # Cleanup
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# ============================================================================
# WORKDIR - Igual que estructura local
# ============================================================================
WORKDIR /app

# =============================================================================
# DEVELOPMENT STAGE - Para desarrollo local como ROOT
# =============================================================================
FROM base AS development

# ✅ CONFIGURAR HUGGINGFACE ANTES DE INSTALAR
ENV HF_HOME=/app/.cache/huggingface \
    HF_HUB_CACHE=/app/.cache/huggingface/hub

# ✅ CREAR DIRECTORIOS DE CACHE
RUN mkdir -p /app/.cache/huggingface

# ✅ COPY DEPENDENCIES
COPY requirements.txt* pyproject.toml* ./

# ✅ INSTALL DEPENDENCIES
RUN pip install --upgrade pip && \
    pip install --no-cache-dir -r requirements.txt

# ✅ COPY APPLICATION PARA DOWNLOAD
COPY agents/ ./agents/
COPY core/ ./core/
COPY services/ ./services/
COPY personas/ ./personas/
COPY frontend/ ./frontend/
COPY agent.py ./

# ✅ AÑADIR: DOWNLOAD MODELS EN DEVELOPMENT
RUN python agent.py download-files

# ✅ CREATE DIRECTORIES
RUN mkdir -p /app/logs

# ✅ DESARROLLO: Sin usuario no-root (ejecuta como root)
# No hay USER appuser - se ejecuta como root para simplicidad

# ✅ HEALTH CHECK
HEALTHCHECK --interval=30s --timeout=10s --start-period=15s --retries=3 \
    CMD curl -f http://localhost:${PORT:-8081}/health || exit 1

# ✅ EXPOSE PORTS
EXPOSE 8000 8081

# ✅ DEFAULT COMMAND - Override en docker-compose
CMD ["python", "agent.py", "start"]

# =============================================================================
# PRODUCTION STAGE - Para Render.com con seguridad no-root
# =============================================================================
FROM base AS production

# ✅ CONFIGURAR HUGGINGFACE PRIMERO
ENV HF_HOME=/app/.cache/huggingface \
    HF_HUB_CACHE=/app/.cache/huggingface/hub \
    TRANSFORMERS_CACHE=/app/.cache/huggingface/transformers

# ✅ CREAR DIRECTORIOS DE CACHE
RUN mkdir -p /app/.cache/huggingface

# ✅ INSTALL PRODUCTION DEPENDENCIES
COPY requirements.txt ./
RUN pip install --upgrade pip && \
    pip install --no-cache-dir -r requirements.txt

# ✅ COPY APPLICATION - MISMA ESTRUCTURA
COPY agents/ ./agents/
COPY core/ ./core/
COPY services/ ./services/
COPY personas/ ./personas/
COPY frontend/ ./frontend/
COPY agent.py ./

# ✅ LOGS DIRECTORY
RUN mkdir -p /app/logs

# ✅ DOWNLOAD MODELS ANTES de crear usuario (como root)
RUN python agent.py download-files

# ✅ PRODUCTION SECURITY - Crear usuario DESPUÉS del download
RUN groupadd -r appuser && useradd -r -g appuser -u 1000 appuser \
    && chown -R appuser:appuser /app
USER appuser

# ✅ PRODUCTION HEALTH CHECK
HEALTHCHECK --interval=30s --timeout=15s --start-period=30s --retries=5 \
    CMD curl -f http://localhost:${PORT:-8081}/health || exit 1

# ✅ EXPOSE HEALTH CHECK PORT
EXPOSE 8081

# ✅ PRODUCTION COMMAND
CMD ["python", "agent.py", "start"]
