services:
  livekit-server:
    image: livekit/livekit-server:latest
    container_name: monaquehabla-livekit
    ports:
      - "${LIVEKIT_PORT:-7880}:7880"     # WebSocket signaling
      - "7881:7881"                      # RTC TCP port
      - "40000-40100:40000-40100/udp"    # RTC UDP range (CR√çTICO para WebRTC)
    env_file:
      - .env
    volumes:
      - ./livekit.yaml:/etc/livekit.yaml:ro
    # command: ["--dev", "--bind", "0.0.0.0"]
    command: ["--config", "/etc/livekit.yaml", "--bind", "0.0.0.0"]
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "wget -q --spider http://localhost:7880 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    networks:
      - livekit-network

  token-server:
    build:
      context: .
      dockerfile: Dockerfile.local
      target: development
    container_name: monaquehabla-token-server
    ports:
      - "${TOKEN_SERVER_PORT:-8000}:${PORT:-8000}"
    env_file:
      - .env
    environment:
      - PYTHONUNBUFFERED=1
      - FLASK_ENV=development
      - FLASK_DEBUG=1
    volumes:
      - ./services:/app/services:rw
      - ./frontend:/app/frontend:rw
    restart: unless-stopped
    depends_on:
      livekit-server:
        condition: service_healthy
    command: python services/token_server.py
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 10s
    networks:
      - livekit-network

  voice-agent:
    build:
      context: .
      dockerfile: Dockerfile.local
      target: development
    container_name: monaquehabla-voice-agent
    ports:
      - "${AGENT_PORT:-8081}:${PORT:-8081}"
    env_file:
      - .env
    environment:
      - PYTHONUNBUFFERED=1
    volumes:
      - ./agents:/app/agents:rw
      - ./core:/app/core:rw
      - ./services:/app/services:rw
      - ./personas:/app/personas:rw
    restart: unless-stopped
    depends_on:
      livekit-server:
        condition: service_healthy
      token-server:
        condition: service_healthy
    command: python agent.py start
    networks:
      - livekit-network

networks:
  livekit-network:
    driver: bridge
